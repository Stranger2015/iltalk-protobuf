// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: profanedb/protobuf/db.proto

#include "profanedb/protobuf/db.pb.h"
#include "profanedb/protobuf/db.grpc.pb.h"

#include <grpc++/impl/codegen/async_stream.h>
#include <grpc++/impl/codegen/async_unary_call.h>
#include <grpc++/impl/codegen/channel_interface.h>
#include <grpc++/impl/codegen/client_unary_call.h>
#include <grpc++/impl/codegen/method_handler_impl.h>
#include <grpc++/impl/codegen/rpc_service_method.h>
#include <grpc++/impl/codegen/service_type.h>
#include <grpc++/impl/codegen/sync_stream.h>
namespace profanedb {
namespace protobuf {

static const char* Db_method_names[] = {
  "/profanedb.protobuf.Db/Get",
  "/profanedb.protobuf.Db/Put",
  "/profanedb.protobuf.Db/Delete",
};

std::unique_ptr< Db::Stub> Db::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  std::unique_ptr< Db::Stub> stub(new Db::Stub(channel));
  return stub;
}

Db::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_Get_(Db_method_names[0], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Put_(Db_method_names[1], ::grpc::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Db_method_names[2], ::grpc::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Db::Stub::Get(::grpc::ClientContext* context, const ::profanedb::protobuf::GetReq& request, ::profanedb::protobuf::GetResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Get_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::GetResp>* Db::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::profanedb::protobuf::GetReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::GetResp>::Create(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::Status Db::Stub::Put(::grpc::ClientContext* context, const ::profanedb::protobuf::PutReq& request, ::profanedb::protobuf::PutResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Put_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::PutResp>* Db::Stub::AsyncPutRaw(::grpc::ClientContext* context, const ::profanedb::protobuf::PutReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::PutResp>::Create(channel_.get(), cq, rpcmethod_Put_, context, request);
}

::grpc::Status Db::Stub::Delete(::grpc::ClientContext* context, const ::profanedb::protobuf::DelReq& request, ::profanedb::protobuf::DelResp* response) {
  return ::grpc::BlockingUnaryCall(channel_.get(), rpcmethod_Delete_, context, request, response);
}

::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::DelResp>* Db::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::profanedb::protobuf::DelReq& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::ClientAsyncResponseReader< ::profanedb::protobuf::DelResp>::Create(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

Db::Service::Service() {
  AddMethod(new ::grpc::RpcServiceMethod(
      Db_method_names[0],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Db::Service, ::profanedb::protobuf::GetReq, ::profanedb::protobuf::GetResp>(
          std::mem_fn(&Db::Service::Get), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Db_method_names[1],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Db::Service, ::profanedb::protobuf::PutReq, ::profanedb::protobuf::PutResp>(
          std::mem_fn(&Db::Service::Put), this)));
  AddMethod(new ::grpc::RpcServiceMethod(
      Db_method_names[2],
      ::grpc::RpcMethod::NORMAL_RPC,
      new ::grpc::RpcMethodHandler< Db::Service, ::profanedb::protobuf::DelReq, ::profanedb::protobuf::DelResp>(
          std::mem_fn(&Db::Service::Delete), this)));
}

Db::Service::~Service() {
}

::grpc::Status Db::Service::Get(::grpc::ServerContext* context, const ::profanedb::protobuf::GetReq* request, ::profanedb::protobuf::GetResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Db::Service::Put(::grpc::ServerContext* context, const ::profanedb::protobuf::PutReq* request, ::profanedb::protobuf::PutResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Db::Service::Delete(::grpc::ServerContext* context, const ::profanedb::protobuf::DelReq* request, ::profanedb::protobuf::DelResp* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace profanedb
}  // namespace protobuf

