// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: profanedb/protobuf/storage.proto

#ifndef PROTOBUF_profanedb_2fprotobuf_2fstorage_2eproto__INCLUDED
#define PROTOBUF_profanedb_2fprotobuf_2fstorage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
// @@protoc_insertion_point(includes)
namespace google {
namespace protobuf {
class Any;
class AnyDefaultTypeInternal;
extern AnyDefaultTypeInternal _Any_default_instance_;
}  // namespace protobuf
}  // namespace google
namespace profanedb {
namespace protobuf {
class Key;
class KeyDefaultTypeInternal;
extern KeyDefaultTypeInternal _Key_default_instance_;
class MessageTreeNode;
class MessageTreeNodeDefaultTypeInternal;
extern MessageTreeNodeDefaultTypeInternal _MessageTreeNode_default_instance_;
class StorableMessage;
class StorableMessageDefaultTypeInternal;
extern StorableMessageDefaultTypeInternal _StorableMessage_default_instance_;
}  // namespace protobuf
}  // namespace profanedb

namespace profanedb {
namespace protobuf {

namespace protobuf_profanedb_2fprotobuf_2fstorage_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_profanedb_2fprotobuf_2fstorage_2eproto

// ===================================================================

class Key : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:profanedb.protobuf.Key) */ {
 public:
  Key();
  virtual ~Key();

  Key(const Key& from);

  inline Key& operator=(const Key& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Key& default_instance();

  static inline const Key* internal_default_instance() {
    return reinterpret_cast<const Key*>(
               &_Key_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Key* other);

  // implements Message ----------------------------------------------

  inline Key* New() const PROTOBUF_FINAL { return New(NULL); }

  Key* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Key& from);
  void MergeFrom(const Key& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Key* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string message_type = 1;
  void clear_message_type();
  static const int kMessageTypeFieldNumber = 1;
  const ::std::string& message_type() const;
  void set_message_type(const ::std::string& value);
  #if LANG_CXX11
  void set_message_type(::std::string&& value);
  #endif
  void set_message_type(const char* value);
  void set_message_type(const char* value, size_t size);
  ::std::string* mutable_message_type();
  ::std::string* release_message_type();
  void set_allocated_message_type(::std::string* message_type);

  // string field = 2;
  void clear_field();
  static const int kFieldFieldNumber = 2;
  const ::std::string& field() const;
  void set_field(const ::std::string& value);
  #if LANG_CXX11
  void set_field(::std::string&& value);
  #endif
  void set_field(const char* value);
  void set_field(const char* value, size_t size);
  ::std::string* mutable_field();
  ::std::string* release_field();
  void set_allocated_field(::std::string* field);

  // bytes value = 3;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:profanedb.protobuf.Key)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_type_;
  ::google::protobuf::internal::ArenaStringPtr field_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  mutable int _cached_size_;
  friend struct protobuf_profanedb_2fprotobuf_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StorableMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:profanedb.protobuf.StorableMessage) */ {
 public:
  StorableMessage();
  virtual ~StorableMessage();

  StorableMessage(const StorableMessage& from);

  inline StorableMessage& operator=(const StorableMessage& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StorableMessage& default_instance();

  static inline const StorableMessage* internal_default_instance() {
    return reinterpret_cast<const StorableMessage*>(
               &_StorableMessage_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(StorableMessage* other);

  // implements Message ----------------------------------------------

  inline StorableMessage* New() const PROTOBUF_FINAL { return New(NULL); }

  StorableMessage* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const StorableMessage& from);
  void MergeFrom(const StorableMessage& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(StorableMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .profanedb.protobuf.Key key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::profanedb::protobuf::Key& key() const;
  ::profanedb::protobuf::Key* mutable_key();
  ::profanedb::protobuf::Key* release_key();
  void set_allocated_key(::profanedb::protobuf::Key* key);

  // .google.protobuf.Any payload = 2;
  bool has_payload() const;
  void clear_payload();
  static const int kPayloadFieldNumber = 2;
  const ::google::protobuf::Any& payload() const;
  ::google::protobuf::Any* mutable_payload();
  ::google::protobuf::Any* release_payload();
  void set_allocated_payload(::google::protobuf::Any* payload);

  // @@protoc_insertion_point(class_scope:profanedb.protobuf.StorableMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::profanedb::protobuf::Key* key_;
  ::google::protobuf::Any* payload_;
  mutable int _cached_size_;
  friend struct protobuf_profanedb_2fprotobuf_2fstorage_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MessageTreeNode : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:profanedb.protobuf.MessageTreeNode) */ {
 public:
  MessageTreeNode();
  virtual ~MessageTreeNode();

  MessageTreeNode(const MessageTreeNode& from);

  inline MessageTreeNode& operator=(const MessageTreeNode& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MessageTreeNode& default_instance();

  static inline const MessageTreeNode* internal_default_instance() {
    return reinterpret_cast<const MessageTreeNode*>(
               &_MessageTreeNode_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(MessageTreeNode* other);

  // implements Message ----------------------------------------------

  inline MessageTreeNode* New() const PROTOBUF_FINAL { return New(NULL); }

  MessageTreeNode* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MessageTreeNode& from);
  void MergeFrom(const MessageTreeNode& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MessageTreeNode* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .profanedb.protobuf.MessageTreeNode children = 2;
  int children_size() const;
  void clear_children();
  static const int kChildrenFieldNumber = 2;
  const ::profanedb::protobuf::MessageTreeNode& children(int index) const;
  ::profanedb::protobuf::MessageTreeNode* mutable_children(int index);
  ::profanedb::protobuf::MessageTreeNode* add_children();
  ::google::protobuf::RepeatedPtrField< ::profanedb::protobuf::MessageTreeNode >*
      mutable_children();
  const ::google::protobuf::RepeatedPtrField< ::profanedb::protobuf::MessageTreeNode >&
      children() const;

  // .profanedb.protobuf.StorableMessage message = 1;
  bool has_message() const;
  void clear_message();
  static const int kMessageFieldNumber = 1;
  const ::profanedb::protobuf::StorableMessage& message() const;
  ::profanedb::protobuf::StorableMessage* mutable_message();
  ::profanedb::protobuf::StorableMessage* release_message();
  void set_allocated_message(::profanedb::protobuf::StorableMessage* message);

  // @@protoc_insertion_point(class_scope:profanedb.protobuf.MessageTreeNode)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::profanedb::protobuf::MessageTreeNode > children_;
  ::profanedb::protobuf::StorableMessage* message_;
  mutable int _cached_size_;
  friend struct protobuf_profanedb_2fprotobuf_2fstorage_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Key

// string message_type = 1;
inline void Key::clear_message_type() {
  message_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::message_type() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.Key.message_type)
  return message_type_.GetNoArena();
}
inline void Key::set_message_type(const ::std::string& value) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:profanedb.protobuf.Key.message_type)
}
#if LANG_CXX11
inline void Key::set_message_type(::std::string&& value) {
  
  message_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:profanedb.protobuf.Key.message_type)
}
#endif
inline void Key::set_message_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:profanedb.protobuf.Key.message_type)
}
inline void Key::set_message_type(const char* value, size_t size) {
  
  message_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:profanedb.protobuf.Key.message_type)
}
inline ::std::string* Key::mutable_message_type() {
  
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.Key.message_type)
  return message_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_message_type() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.Key.message_type)
  
  return message_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_message_type(::std::string* message_type) {
  if (message_type != NULL) {
    
  } else {
    
  }
  message_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message_type);
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.Key.message_type)
}

// string field = 2;
inline void Key::clear_field() {
  field_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::field() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.Key.field)
  return field_.GetNoArena();
}
inline void Key::set_field(const ::std::string& value) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:profanedb.protobuf.Key.field)
}
#if LANG_CXX11
inline void Key::set_field(::std::string&& value) {
  
  field_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:profanedb.protobuf.Key.field)
}
#endif
inline void Key::set_field(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:profanedb.protobuf.Key.field)
}
inline void Key::set_field(const char* value, size_t size) {
  
  field_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:profanedb.protobuf.Key.field)
}
inline ::std::string* Key::mutable_field() {
  
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.Key.field)
  return field_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_field() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.Key.field)
  
  return field_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_field(::std::string* field) {
  if (field != NULL) {
    
  } else {
    
  }
  field_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), field);
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.Key.field)
}

// bytes value = 3;
inline void Key::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Key::value() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.Key.value)
  return value_.GetNoArena();
}
inline void Key::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:profanedb.protobuf.Key.value)
}
#if LANG_CXX11
inline void Key::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:profanedb.protobuf.Key.value)
}
#endif
inline void Key::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:profanedb.protobuf.Key.value)
}
inline void Key::set_value(const void* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:profanedb.protobuf.Key.value)
}
inline ::std::string* Key::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.Key.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Key::release_value() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.Key.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Key::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.Key.value)
}

// -------------------------------------------------------------------

// StorableMessage

// .profanedb.protobuf.Key key = 1;
inline bool StorableMessage::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
inline void StorableMessage::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
inline const ::profanedb::protobuf::Key& StorableMessage::key() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.StorableMessage.key)
  return key_ != NULL ? *key_
                         : *::profanedb::protobuf::Key::internal_default_instance();
}
inline ::profanedb::protobuf::Key* StorableMessage::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::profanedb::protobuf::Key;
  }
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.StorableMessage.key)
  return key_;
}
inline ::profanedb::protobuf::Key* StorableMessage::release_key() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.StorableMessage.key)
  
  ::profanedb::protobuf::Key* temp = key_;
  key_ = NULL;
  return temp;
}
inline void StorableMessage::set_allocated_key(::profanedb::protobuf::Key* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.StorableMessage.key)
}

// .google.protobuf.Any payload = 2;
inline bool StorableMessage::has_payload() const {
  return this != internal_default_instance() && payload_ != NULL;
}
inline void StorableMessage::clear_payload() {
  if (GetArenaNoVirtual() == NULL && payload_ != NULL) delete payload_;
  payload_ = NULL;
}
inline const ::google::protobuf::Any& StorableMessage::payload() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.StorableMessage.payload)
  return payload_ != NULL ? *payload_
                         : *::google::protobuf::Any::internal_default_instance();
}
inline ::google::protobuf::Any* StorableMessage::mutable_payload() {
  
  if (payload_ == NULL) {
    payload_ = new ::google::protobuf::Any;
  }
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.StorableMessage.payload)
  return payload_;
}
inline ::google::protobuf::Any* StorableMessage::release_payload() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.StorableMessage.payload)
  
  ::google::protobuf::Any* temp = payload_;
  payload_ = NULL;
  return temp;
}
inline void StorableMessage::set_allocated_payload(::google::protobuf::Any* payload) {
  delete payload_;
  payload_ = payload;
  if (payload) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.StorableMessage.payload)
}

// -------------------------------------------------------------------

// MessageTreeNode

// .profanedb.protobuf.StorableMessage message = 1;
inline bool MessageTreeNode::has_message() const {
  return this != internal_default_instance() && message_ != NULL;
}
inline void MessageTreeNode::clear_message() {
  if (GetArenaNoVirtual() == NULL && message_ != NULL) delete message_;
  message_ = NULL;
}
inline const ::profanedb::protobuf::StorableMessage& MessageTreeNode::message() const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.MessageTreeNode.message)
  return message_ != NULL ? *message_
                         : *::profanedb::protobuf::StorableMessage::internal_default_instance();
}
inline ::profanedb::protobuf::StorableMessage* MessageTreeNode::mutable_message() {
  
  if (message_ == NULL) {
    message_ = new ::profanedb::protobuf::StorableMessage;
  }
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.MessageTreeNode.message)
  return message_;
}
inline ::profanedb::protobuf::StorableMessage* MessageTreeNode::release_message() {
  // @@protoc_insertion_point(field_release:profanedb.protobuf.MessageTreeNode.message)
  
  ::profanedb::protobuf::StorableMessage* temp = message_;
  message_ = NULL;
  return temp;
}
inline void MessageTreeNode::set_allocated_message(::profanedb::protobuf::StorableMessage* message) {
  delete message_;
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:profanedb.protobuf.MessageTreeNode.message)
}

// repeated .profanedb.protobuf.MessageTreeNode children = 2;
inline int MessageTreeNode::children_size() const {
  return children_.size();
}
inline void MessageTreeNode::clear_children() {
  children_.Clear();
}
inline const ::profanedb::protobuf::MessageTreeNode& MessageTreeNode::children(int index) const {
  // @@protoc_insertion_point(field_get:profanedb.protobuf.MessageTreeNode.children)
  return children_.Get(index);
}
inline ::profanedb::protobuf::MessageTreeNode* MessageTreeNode::mutable_children(int index) {
  // @@protoc_insertion_point(field_mutable:profanedb.protobuf.MessageTreeNode.children)
  return children_.Mutable(index);
}
inline ::profanedb::protobuf::MessageTreeNode* MessageTreeNode::add_children() {
  // @@protoc_insertion_point(field_add:profanedb.protobuf.MessageTreeNode.children)
  return children_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::profanedb::protobuf::MessageTreeNode >*
MessageTreeNode::mutable_children() {
  // @@protoc_insertion_point(field_mutable_list:profanedb.protobuf.MessageTreeNode.children)
  return &children_;
}
inline const ::google::protobuf::RepeatedPtrField< ::profanedb::protobuf::MessageTreeNode >&
MessageTreeNode::children() const {
  // @@protoc_insertion_point(field_list:profanedb.protobuf.MessageTreeNode.children)
  return children_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace protobuf
}  // namespace profanedb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_profanedb_2fprotobuf_2fstorage_2eproto__INCLUDED
